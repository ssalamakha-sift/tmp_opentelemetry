name: Publish custom Docker Image to GCR

on:
  release:
    types: [published]

env:
  REGESTRY: gcr.io
  PROJECT_ID: sift-shared-data
  RELEASE_NAME: ${{ github.event.release.name }}
  RELEASE_TAG: ${{ github.event.release.tag_name }}

jobs:     
  prepare_dockerfile_java:
    env:
      DOCKERFILE_PATH: "./sift-java-base"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        if: contains(env.RELEASE_NAME, 'java')
        uses: actions/checkout@v3
      - name: Prepare Dockerfile metadata 
        if: contains(env.RELEASE_NAME, 'java')
        run: |   
          set -euxo pipefail
          JAVA_OPENJDK_NAME=$(grep -E "^FROM.*jdk.*$" $DOCKERFILE_PATH/Dockerfile | awk -F' '  '{print $2}' |  awk -F: '{print $1}' | tr / -)
          JAVA_OPENJDK_VEERSION=$(grep -E "^FROM.*jdk.*$" $DOCKERFILE_PATH/Dockerfile | awk -F' '  '{print $2}' | awk -F: '{print $2}')
          R_TAG=$(echo $RELEASE_TAG | cut -d "_" -f1)
          IMAGE_NAME=$JAVA_OPENJDK_NAME
          IMAGE_VERSION="$JAVA_OPENJDK_VEERSION-$R_TAG"
          mkdir -p ./assets 
          echo "IMAGE_NAME=$IMAGE_NAME" >> ./assets/Dockerfile_meta
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> ./assets/Dockerfile_meta
          mv $DOCKERFILE_PATH/Dockerfile ./assets/Dockerfile
      - uses: actions/upload-artifact@v3
        if: contains(env.RELEASE_NAME, 'java')
        with:
          name: assets
          path: ./assets 
  prepare_dockerfile_python: 
    env:
      DOCKERFILE_PATH: "./sift-python-base"  
    runs-on: ubuntu-latest
    steps:
      - name: Dummy step
        if: contains(env.RELEASE_NAME, 'python')
        run: echo "NOT IMPLEMENTED YET" && exit 0
  build_and_push:
      needs: [prepare_dockerfile_java, prepare_dockerfile_python]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/download-artifact@v3
          with:
            name: assets
            path: ./assets
        - name: Fetch Dockerfile metadata
          run: |
            set -euxo pipefail
            [[ ! -f "./assets/Dockerfile_meta" ]] || [[ ! -f "./assets/Dockerfile" ]] && echo "either ./assets/Dockerfile_meta or ./assets/Dockerfile does not exist" && exit 1
            while IFS= read -r line; do
              [[ "$line" == *"IMAGE_NAME"* ]] && echo "IMAGE_NAME=$(echo $line | cut -d '=' -f2)" >> $GITHUB_ENV && continue
              [[ "$line" == *"IMAGE_VERSION"* ]] && echo "IMAGE_VERSION=$(echo $line | cut -d '=' -f2)" >> $GITHUB_ENV && continue
            done < ./assets/Dockerfile_meta && echo "Dockerfile metadata parsed successfully"  ||  echo "exit code $? /assets/Dockerfile_meta is empty or does not exist"
        - name: Push Dockerfile
          run: |
            set -euxo pipefail
            cd ./assets 
            echo $(ls -la)

            DOCKER_IMAGE_FOR=NOT_SET
            [[ $RELEASE_NAME == *"DOCKER_IMAGE_FOR:java"* ]] && DOCKER_IMAGE_FOR=java
            [[ $RELEASE_NAME == *"DOCKER_IMAGE_FOR:python"* ]] && DOCKER_IMAGE_FOR=python
            [[ $DOCKER_IMAGE_FOR == "NOT_SET" ]] && echo "DOCKER_IMAGE_FOR=$DOCKER_IMAGE_FOR" && exit 1

            echo $IMAGE_NAME
            echo $IMAGE_VERSION

            echo "NOT IMPLEMENTED YET" && exit 0

            docker build -t $IMAGE_NAME:$IMAGE_VERSION .
            docker tag "$IMAGE_NAME:$IMAGE_VERSION" "$REGESTRY/$PROJECT_ID/base/$DOCKER_IMAGE_FOR/$IMAGE_NAME:$IMAGE_VERSION" 
            docker push "$REGESTRY/$PROJECT_ID/base/$IMAGE_NAME:$IMAGE_VERSION"