name: Publish custom Docker Image to GCR v1

on:
  release:
    types: [published]

env:
  REGESTRY: gcr.io
  PROJECT_ID: sift-shared-data
  RELEASE_NAME: ${{ github.event.release.name }}
  RELEASE_BODY: ${{ github.event.release.body }}
  RELEASE_TAG: ${{ github.event.release.tag_name }}

jobs:     
  prepare_dockerfile_java:
    env:
      DOCKERFILE_PATH: "./sift-java-base"
      DEFAULT_BASE_IMAGE_NAME: "azul/zulu-openjdk"
      DEFAULT_BASE_IMAGE_VERSION: "11.0.13"
      DEFAULT_OPEN_TELEMETRY_VERSION: "1.21.0"
      DEFAULT_CLOUD_PROFILER_VERSION: "20220905_RC00"
    runs-on: ubuntu-latest
    steps:
      - name: Parse release 
        if: contains(env.RELEASE_NAME, 'java')
        run: |
          set -euxo pipefail
          for input in $(echo $RELEASE_BODY | tr \r \n)
          do
            [[ "$input" == *"BASE_IMAGE_NAME"* ]] && echo "BASE_IMAGE_NAME=$(echo $input | cut -d ':' -f2)" >> $GITHUB_ENV && break || echo "BASE_IMAGE_NAME=$(echo $DEFAULT_BASE_IMAGE_NAME)" >> $GITHUB_ENV && break
            [[ "$input" == *"BASE_IMAGE_VERSION"* ]] && echo "BASE_IMAGE_VERSION=$(echo $input | cut -d ':' -f2)" >> $GITHUB_ENV && break || echo "BASE_IMAGE_VERSION=$(echo $DEFAULT_BASE_IMAGE_VERSION)" >> $GITHUB_ENV && break
            [[ "$input" == *"OPEN_TELEMETRY_VERSION"* ]] && echo "OPEN_TELEMETRY_VERSION=$(echo $input | cut -d ':' -f2)" >> $GITHUB_ENV && break || echo "OPEN_TELEMETRY_VERSION=$(echo $DEFAULT_OPEN_TELEMETRY_VERSION)" >> $GITHUB_ENV && break
            [[ "$input" == *"CLOUD_PROFILER_VERSION"* ]] && echo "CLOUD_PROFILER_VERSION=$(echo $input | cut -d ':' -f2)" >> $GITHUB_ENV && break || echo "CLOUD_PROFILER_VERSION=$(echo $DEFAULT_CLOUD_PROFILER_VERSION)" >> $GITHUB_ENV && break
          done
          echo $BASE_IMAGE_NAME
          echo $BASE_IMAGE_VERSION
          echo $OPEN_TELEMETRY_VERSION
          echo $CLOUD_PROFILER_VERSION
      - name: Check out repository
        if: contains(env.RELEASE_NAME, 'java')
        uses: actions/checkout@v3
      - name: Prepare Dockerfile metadata 
        if: contains(env.RELEASE_NAME, 'java')
        run: |   
          IMAGE_NAME=$(echo $BASE_IMAGE_NAME | tr / -)
          R_TAG=$(echo $RELEASE_TAG | cut -d '_' f1)
          IMAGE_VERSION="BASE_IMAGE_VERSION-$OPEN_TELEMETRY_VERSION-$CLOUD_PROFILER_VERSION-$R_TAG"
          mkdir -p ./assets 
          echo "IMAGE_NAME=$IMAGE_NAME" >> ./assets/Dockerfile_meta
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> ./assets/Dockerfile_meta
      - name: Build Dockerfile from template 
        if: contains(env.RELEASE_NAME, 'java')
        run: |    
          set -euxo pipefail
          BASE_IMAGE_NAME="$BASE_IMAGE_NAME" BASE_IMAGE_VERSION="$BASE_IMAGE_VERSION" OPEN_TELEMETRY_VERSION="$OPEN_TELEMETRY_VERSION" CLOUD_PROFILER_VERSION="$CLOUD_PROFILER_VERSION" envsubst < $DOCKERFILE_PATH/Dockerfile_template | tee ./assets/Dockerfile > /dev/null
      - uses: actions/upload-artifact@v3
        if: contains(env.RELEASE_NAME, 'java')
        with:
          name: assets
          path: ./assets 

  prepare_dockerfile_python: 
    env:
      DOCKERFILE_PATH: "./sift-python-base"  
    runs-on: ubuntu-latest
    steps:
      - name: Dummy step
        if: contains(env.RELEASE_NAME, 'python')
        run: echo "NOT IMPLEMENTED YET" && exit 1

  #image name, version, dir optional - lables csv name=value
  build_and_push:
      needs: [prepare_dockerfile_java, prepare_dockerfile_python]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/download-artifact@v3
          with:
            name: assets
            path: ./assets
        - name: Dummy step
          run: |
            cat ./assets/Dockerfile
            echo " +++ "
            cat ./assets/Dockerfile_meta
            echo "DOCKER_IMAGE_FOR ${{ github.event.inputs.DOCKER_IMAGE_FOR }}"
            echo "NOT IMPLEMENTED YET" && exit 0