name: JavaImage2Gcr

on:
  release:
    types: [published]

env:
  REGESTRY: gcr.io
  PROJECT_ID: sift-shared-data
  DOCKERFILE_PATH: "./sift-java-base"    

jobs:
  build_and_push_to_registry:
    name: Push Java Docker image with opentelemetry agent to Regestry
    runs-on: ubuntu-latest
    steps:
      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0 
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure Docker Client
        run: |
          echo $secrets.GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${PROJECT_ID}
          gcloud --quiet auth configure-docker ${REGESTRY}
      - name: Parse metadata 
        run: |
          set -euxo pipefail

          CURR_COMMIT=${{ github.sha }}
          IS_FIRST_TAG=false
          IS_DOCKERFILE_CHANGED=false
          DIFF=''
          CURR_TAG=$(git tag --sort=-creatordate | sed -n 1p)
          PREV_TAG=$(git tag --sort=-creatordate | sed -n 2p)

          [ -z $PREV_TAG ] && IS_FIRST_TAG=true

          if [ "$IS_FIRST_TAG" = true ]; then
            DIFF=$(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r $CURR_COMMIT | xargs)
          else   
            DIFF=$(git diff --name-only --diff-filter=ACMRT $CURR_TAG $PREV_TAG | xargs)
          fi

          echo $DIFF

          [[ $DIFF == *"sift-java-base/Dockerfile"* ]] && IS_DOCKERFILE_CHANGED=true
          [ "$IS_DOCKERFILE_CHANGED" = false ] && echo "Current release does not contain changes in sift-java-base/Dockerfile"  && exit 1

          JAVA_OPENJDK_NAME=$(grep -E "^FROM.*jdk.*$" $DOCKERFILE_PATH/Dockerfile | awk -F' '  '{print $2}' | awk -F'/'  '{print $2}' | awk -F: '{print $1}')
          JAVA_OPENJDK_VEERSION=$(grep -E "^FROM.*jdk.*$" $DOCKERFILE_PATH/Dockerfile | awk -F' '  '{print $2}' | awk -F'/'  '{print $2}' | awk -F: '{print $2}')
          VER=${{ github.event.release.tag_name }} 
          
          IMAGE_NAME="$JAVA_OPENJDK_NAME"
          IMAGE_TAG="$JAVA_OPENJDK_VEERSION-$VER"

          if [ -z "$IMAGE_NAME" ] || [ -z "$IMAGE_TAG" ]; then
            echo "Failed on parsing $DOCKERFILE_PATH/Dockerfile , IMAGE NAME or TAG is NOT FOUND"
            exit 1
          fi
          
          echo "IMAGE_NAME=$(echo $IMAGE_NAME)" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(echo $IMAGE_TAG)" >> $GITHUB_ENV
      - name: Push Dockerfile
        run: |
          set -euxo pipefail
          [ -d "$DOCKERFILE_PATH" ] && cd $DOCKERFILE_PATH  

          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker tag "$IMAGE_NAME:$IMAGE_TAG" "$REGESTRY/$PROJECT_ID/base/$IMAGE_NAME:$IMAGE_TAG" 
          docker push "$REGESTRY/$PROJECT_ID/base/$IMAGE_NAME:$IMAGE_TAG"
